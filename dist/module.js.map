{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./annotations_query_ctrl.ts","webpack:///./config_ctrl.ts","webpack:///./datasource.ts","webpack:///./module.ts","webpack:///./query_ctrl.ts","webpack:///external \"app/core/table_model\"","webpack:///external \"app/core/utils/flatten\"","webpack:///external \"app/plugins/sdk\"","webpack:///external \"lodash\""],"names":[],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./module.ts\");\n","export class AwsCloudWatchLogsAnnotationsQueryCtrl {\n  scope: any;\n  static templateUrl = 'partials/annotations.editor.html';\n\n  constructor($scope, $injector) {\n    this.scope = $scope;\n  }\n}\n","export class AwsCloudWatchLogsDatasourceConfigCtrl {\n  current: any;\n  accessKeyExist: any;\n  secretKeyExist: any;\n  datasourceSrv: any;\n  authTypes: any;\n  static templateUrl = 'partials/config.html';\n\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';\n\n    this.accessKeyExist = this.current.secureJsonFields.accessKey;\n    this.secretKeyExist = this.current.secureJsonFields.secretKey;\n    this.datasourceSrv = datasourceSrv;\n    this.authTypes = [\n      { name: 'Access & secret key', value: 'keys' },\n      { name: 'Credentials file', value: 'credentials' },\n      { name: 'ARN', value: 'arn' },\n    ];\n  }\n\n  resetAccessKey() {\n    this.accessKeyExist = false;\n  }\n\n  resetSecretKey() {\n    this.secretKeyExist = false;\n  }\n}\n","import _ from \"lodash\";\nimport TableModel from 'grafana/app/core/table_model';\nimport flatten from 'grafana/app/core/utils/flatten';\n\nexport class AwsCloudWatchLogsDatasource {\n  type: string;\n  url: string;\n  name: string;\n  id: string;\n  defaultRegion: string;\n  q: any;\n  $q: any;\n  backendSrv: any;\n  templateSrv: any;\n  timeSrv: any;\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  async query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return await this.doRequest({\n      data: query\n    });\n  }\n\n  testDatasource() {\n    return this.doMetricQueryRequest('log_group_names', {\n      region: this.defaultRegion,\n      logGroupNamePrefix: 'test'\n    }).then(res => {\n      return this.q.when({ status: \"success\", message: \"Data source is working\", title: \"Success\" });\n    }).catch(err => {\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  async doRequest(options) {\n    const results = await Promise.all(options.data.targets.map(async (target) => {\n      if (!target.useInsights) {\n        return await this.backendSrv.datasourceRequest({\n          url: '/api/tsdb/query',\n          method: 'POST',\n          data: {\n            from: options.data.range.from.valueOf().toString(),\n            to: options.data.range.to.valueOf().toString(),\n            queries: [target],\n          }\n        });\n      } else {\n        const startResult = await this.backendSrv.datasourceRequest({\n          url: '/api/tsdb/query',\n          method: 'POST',\n          data: {\n            from: options.data.range.from.valueOf().toString(),\n            to: options.data.range.to.valueOf().toString(),\n            queries: [target],\n          }\n        });\n        const queryId = startResult.data.results[target.refId].meta.QueryId;\n        target.queryId = queryId;\n        let queryResult;\n        for (let i = 0; i < 60; i++) {\n          queryResult = await this.backendSrv.datasourceRequest({\n            url: '/api/tsdb/query',\n            method: 'POST',\n            data: {\n              from: options.data.range.from.valueOf().toString(),\n              to: options.data.range.to.valueOf().toString(),\n              queries: [target],\n            }\n          });\n          const status = queryResult.data.results[target.refId].meta.Status;\n          if (status === 'Complete') {\n            break;\n          } else if (_.includes(['Failed', 'Cancelled'], status)) {\n            throw 'insights query failed';\n          } else {\n            await this.delay(1000);\n            continue; // in progress\n          }\n        }\n        return queryResult;\n      }\n    }));\n\n    const resultsMap = {};\n    _.each(results, (result: any) => {\n      _.each(result.data.results, (r) => {\n        resultsMap[r.refId] = r;\n      })\n    })\n    let res: any = [];\n    for (const target of options.data.targets) {\n      const r = resultsMap[target.refId];\n      if (!_.isEmpty(r.series)) {\n        _.forEach(r.series, s => {\n          res.push({ target: s.name, datapoints: s.points });\n        });\n      }\n      if (!_.isEmpty(r.tables)) {\n        _.forEach(r.tables, t => {\n          res.push(this.expandMessageField(t));\n        });\n      }\n    }\n\n    return {\n      data: res\n    };\n  }\n\n  delay(msec) {\n    return new Promise(resolve => setTimeout(resolve, msec));\n  }\n\n  buildQueryParameters(options) {\n    let targets = _.map(options.targets, target => {\n      let input: any = {};\n      let inputInsightsStartQuery: any = {};\n      if (!target.useInsights) {\n        let scVars = target.logStreamNames.filter(n => { return n !== \"\"; }).map(n => { return this.templateSrv.replace(n, options.scopedVars); });\n        scVars = scVars[0].replace(/{|}/g,'').split(\",\");\n        console.log(scVars);\n        \n        input = {\n          logGroupName: this.templateSrv.replace(target.logGroupName, options.scopedVars),\n          logStreamNames: scVars,\n          filterPattern: this.templateSrv.replace(target.filterPattern, options.scopedVars),\n          limit: target.limit,\n          interleaved: false\n        };\n        if (input.logStreamNames.length === 0) {\n          delete input.logStreamNames;\n        }\n      } else {\n        inputInsightsStartQuery = {\n          logGroupName: this.templateSrv.replace(target.logGroupName, options.scopedVars),\n          queryString: this.templateSrv.replace(target.queryString, options.scopedVars),\n          limit: target.limit,\n        };\n      }\n\n      return {\n        refId: target.refId,\n        hide: target.hide,\n        datasourceId: this.id,\n        queryType: 'timeSeriesQuery',\n        format: target.format || 'timeserie',\n        region: this.templateSrv.replace(target.region, options.scopedVars) || this.defaultRegion,\n        useInsights: target.useInsights,\n        legendFormat: target.legendFormat,\n        timestampColumn: target.timestampColumn,\n        valueColumn: target.valueColumn,\n        input: input,\n        inputInsightsStartQuery: inputInsightsStartQuery\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  expandMessageField(originalTable) {\n    var table = new TableModel();\n    var i, j;\n    var metricLabels = {};\n\n    if (originalTable.rows.length === 0) {\n      return table;\n    }\n    table.columns = originalTable.columns;\n\n    // Collect all labels across all metrics\n    let messageIndex = table.columns.findIndex(c => {\n      return c.text === 'Message';\n    });\n    let messages = originalTable.rows.map(r => {\n      let messageJson = {};\n      try {\n        if (r[messageIndex][0] === '{') {\n          messageJson = JSON.parse(r[messageIndex]);\n        }\n      } catch (err) {\n        // ignore error\n      }\n      return messageJson;\n    });\n    _.each(messages.slice(0, 100), (message) => {\n      let flattened = flatten(message, null);\n      for (let propName in flattened) {\n        metricLabels[propName] = 1;\n      }\n    });\n\n    // Sort metric labels, create columns for them and record their index\n    let sortedLabels = _.keys(metricLabels).sort();\n    _.each(sortedLabels, function (label, labelIndex) {\n      metricLabels[label] = labelIndex + 1;\n      table.columns.push({ text: label });\n    });\n\n    // Populate rows, set value to empty string when label not present.\n    for (i = 0; i < originalTable.rows.length; i++) {\n      let reordered = originalTable.rows[i];\n      let message = messages[i];\n      for (j = 0; j < sortedLabels.length; j++) {\n        let label = sortedLabels[j];\n        reordered.push(_.get(message, label) || '');\n      }\n      table.rows.push(reordered);\n    }\n\n    return table;\n  }\n\n  metricFindQuery(query) {\n    let region;\n\n    let logGroupNamesQuery = query.match(/^log_group_names\\(([^,]+?),\\s?(.+)\\)/);\n    if (logGroupNamesQuery) {\n      region = logGroupNamesQuery[1];\n      let prefix = logGroupNamesQuery[2];\n      return this.doMetricQueryRequest('log_group_names', {\n        region: this.templateSrv.replace(region),\n        logGroupNamePrefix: this.templateSrv.replace(prefix)\n      });\n    }\n\n    let logStreamNamesQuery = query.match(/^log_stream_names\\(([^,]+?),\\s?(.+)\\)/);\n    if (logStreamNamesQuery) {\n      region = logStreamNamesQuery[1];\n      let logGroupName = logStreamNamesQuery[2];\n      return this.doMetricQueryRequest('log_stream_names', {\n        region: this.templateSrv.replace(region),\n        logGroupName: this.templateSrv.replace(logGroupName),\n        logStreamNamePrefix: \"\"\n      });\n    }\n\n\n    return this.$q.when([]);\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    var range = this.timeSrv.timeRange();\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          _.extend(\n            {\n              refId: 'metricFindQuery',\n              datasourceId: this.id,\n              queryType: 'metricFindQuery',\n              subtype: subtype,\n            },\n            parameters\n          ),\n        ],\n      }\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r.data);\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n\n  annotationQuery(options) {\n    let annotation = options.annotation;\n    let region = annotation.region || this.defaultRegion;\n    let logGroupName = annotation.logGroupName || '';\n    let filterPattern = annotation.filterPattern || '';\n    let tagKeys = annotation.tagKeys || '';\n    tagKeys = tagKeys.split(',');\n    let titleFormat = annotation.titleFormat || '';\n    let textFormat = annotation.textFormat || '';\n\n    if (_.isEmpty(region) || _.isEmpty(logGroupName)) { return Promise.resolve([]); }\n\n    let range = this.timeSrv.timeRange();\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          {\n            refId: 'annotationQuery',\n            datasourceId: this.id,\n            queryType: 'annotationQuery',\n            region: this.templateSrv.replace(region),\n            input: {\n              logGroupName: this.templateSrv.replace(logGroupName),\n              filterPattern: this.templateSrv.replace(filterPattern),\n              interleaved: false\n            }\n          }\n        ]\n      }\n    }).then(r => {\n      if (!r.data.results[\"\"].meta.Events) {\n        return [];\n      }\n      let eventList = r.data.results[\"\"].meta.Events.map((event) => {\n        let messageJson = JSON.parse(event.Message);\n        let tags = _.chain(messageJson)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          }).value();\n\n        return {\n          annotation: annotation,\n          time: event.Timestamp,\n          title: this.renderTemplate(titleFormat, messageJson),\n          tags: tags,\n          text: this.renderTemplate(textFormat, messageJson)\n        };\n      });\n\n      return eventList;\n    });\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n}\n","import { AwsCloudWatchLogsDatasource } from './datasource';\nimport { AwsCloudWatchLogsDatasourceQueryCtrl } from './query_ctrl';\nimport { AwsCloudWatchLogsAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { AwsCloudWatchLogsDatasourceConfigCtrl } from './config_ctrl';\n\nexport {\n  AwsCloudWatchLogsDatasource as Datasource,\n  AwsCloudWatchLogsDatasourceQueryCtrl as QueryCtrl,\n  AwsCloudWatchLogsDatasourceConfigCtrl as ConfigCtrl,\n  AwsCloudWatchLogsAnnotationsQueryCtrl as AnnotationsQueryCtrl\n};\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\n\nexport class AwsCloudWatchLogsDatasourceQueryCtrl extends QueryCtrl {\n  scope: any;\n  target: any;\n  panelCtrl: any;\n  templateSrv: any;\n  datasource: any;\n  defaultRegion: string;\n  suggestLogGroupName: any;\n  suggestLogStreamName: any;\n  static templateUrl = 'partials/query.editor.html';\n\n  constructor($scope, $injector, templateSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.format = this.target.format || 'table';\n    this.target.region = this.target.region || '';\n    this.target.logGroupName = this.target.logGroupName || '';\n    this.target.logStreamNames = this.target.logStreamNames || [];\n    this.target.filterPattern = this.target.filterPattern || '';\n    this.target.queryString = this.target.queryString || '';\n    this.target.limit = this.target.limit || 10000;\n    this.target.legendFormat = this.target.legendFormat || '';\n    this.target.timestampColumn = this.target.timestampColumn || '';\n    this.target.valueColumn = this.target.valueColumn || '';\n    this.templateSrv = templateSrv;\n\n    this.suggestLogGroupName = (query, callback) => {\n      let region = this.target.region || this.defaultRegion;\n      return this.datasource.doMetricQueryRequest('log_group_names', {\n        region: this.templateSrv.replace(region),\n        logGroupNamePrefix: query\n      }).then(data => {\n        callback(data.map(d => { return d.value; }));\n      });\n    };\n\n    this.suggestLogStreamName = (query, callback) => {\n      if (!this.target.logGroupName) {\n        return callback([]);\n      }\n      let region = this.target.region || this.defaultRegion;\n      return this.datasource.doMetricQueryRequest('log_stream_names', {\n        region: this.templateSrv.replace(region),\n        logGroupName: this.target.logGroupName,\n        logStreamNamePrefix: query\n      }).then(data => {\n        callback(data.map(d => { return d.value; }));\n      });\n    };\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh();\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_grafana_app_core_table_model__;","module.exports = __WEBPACK_EXTERNAL_MODULE_grafana_app_core_utils_flatten__;","module.exports = __WEBPACK_EXTERNAL_MODULE_grafana_app_plugins_sdk__;","module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;"],"sourceRoot":""}